package com.vietcombank.training.aop.log;

import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

import com.vietcombank.training.aop.log.LoggerMessage.LoggerMessageBuilder;

@Configuration
public class AppPointCuts {

	@Pointcut("within(@org.springframework.stereotype.Repository *)" +
	        " || within(@org.springframework.stereotype.Service *)" +
	        " || within(@org.springframework.web.bind.annotation.RestController *)")
	public void springBeanPointCut() {
		
	}
	
	@Around("springBeanPointCut()")
	public Object caculateMethodTimeAdvice(ProceedingJoinPoint joinPoint) throws Throwable{
		final Logger log = LoggerFactory.getLogger(joinPoint.getTarget().getClass());
		if(log.isDebugEnabled()) {
			String className = joinPoint.getTarget().getClass().getName();
			String methodName = ((MethodSignature) joinPoint.getSignature()).getMethod().getName();
			String methodArgs = Stream.of(joinPoint.getArgs()).collect(Collectors.toList()).toString();
			long startTime = System.nanoTime();
			Object result = joinPoint.proceed();
			long endTime = System.nanoTime();
			long elapsedTime = endTime - startTime;
			
			LoggerMessageBuilder message = LoggerMessage.builder().className(className).methodName(methodName)
					.methodArgs(methodArgs).elapsedTimeInMillis(TimeUnit.NANOSECONDS.toMillis(elapsedTime))
					.elapsedTimeInMicros(TimeUnit.NANOSECONDS.toMicros(elapsedTime)).result(result);
			log.debug(String.valueOf(message));
			return result;
		}
	}
	
}
